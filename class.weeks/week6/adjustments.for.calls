When a call happens, you need to make a new symbol table whose parent is
the current one.

1       float x = 9.2
2
3       function f(float x) : float {
4           return 2 * x
5       }
6
7       float y = f(3.2)
8
9       print y

During compilation we first push a new SymbolTable onto the SymbolTable stack.
That is for the global symbols.

When we encounter a function definition, we push a new SymbolTable onto the
stack and give the formal parameters. As parsing continues down the tree,
that table remains on the stack. When the visit of children is finished, we
pop it. But, we stored the popped SymbolTable in the FunctionNode.

During execution, when a function call is encountered, the act method of
the FunctionNode pushes the SymbolTable onto the stack, populates
it with the concrete arguments, runs the block, and pops the SymbolTable stack.

