\chapter{An Intermediate Tree}

Antlr makes a great parse tree. We need more. Parse trees recognize
legal syntax, but they don't know any semantics of the language.
We hinted at this transition when we moved to the visitor
pattern and noticed that all visit methods return a type.

Now we want the visitor methods' return type to be a node in our tree.
This tree will understand the language and allow us to run programs
as a compile-and-go interpretter. That is my main goal. We could
also use it to generate assembly.

The reason I focus on compile-and-go interpretation is that I've
done it at work. I've never emitted assembly in a professional
setting, only as an exercise. Some may have other experience.
There is an appendix on assembly generation to get you started if that
is your goal. But, there are other fine books that feature assembly
emission as the final output. They are better if you really want
to do that.

The nodes in our tree will represent the things we need to run
the program (or emit a different language). By making this tree,
we have the chance to introduce a strong type system (is it
really legal to use that symbol in that way?), allocate memory
(in target language output, where will the value live in memory?),
forward references (where is the method that was called, we haven't
seen it yet?), and others.

This tree is sometimes called an annotated parse tree or a decorated
tree. Sometimes people actually augment the parse tree. Our approach
will be to make a completely new tree. So it is more an intermediate
representation of the program than a modification of the parse tree.

I made one change to the grammar. Instead of allowing a bare expression
as a statement, there will be only two real statemetns: assignment and
a new one called print.

    statement : 'print' expr NEWLINE    # printExpr
              | ID '=' expr NEWLINE     # assign
              | NEWLINE                 # blank
              ;

The rest of the grammar is the same.

\section{Nodes}

There will not be a one-to-one mapping between productions in the
grammar and nodes in our tree. While printExpr and assign will
have nodes. But, so will addition, subtraction, multiplication,
and division. We really just imagine what will help us at run-time
and make nodes accordingly.

Since all the statements and expressions will be sharing the same
type, I chose to make an abstract Node class for them to inherit from.
It's not so interesting.

    public abstract class Node {
        public abstract void act();
        public abstract Integer getIntValue();
    }

Expressions will need nodes that do the correct thing when getIntValue
is called. Assign and print statements don't need that method, but
they will have to implement one anyway to comply with the Node type.
Similarly, an ID node does act, only statements do that. But, all
of them will implement at least an empty method.

It is common in compiling and interpretters to have this kind of
overloaded shared container. Everyone has a whole one, but each
uses only the parts it needs.

\section{Leaf Nodes}

Expressions have two leaf nodes: INT and ID.
