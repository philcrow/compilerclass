\chapter{Functions}

Functions take input parameters and return values. In some languages
these are called methods, usually because they receive an implicit
object as a parameter. Other languages have similar constructs called
procedures (which don't return values).

Functions are important. They allow us to factor out bits of code
to make things easier to read and to test. They also make code
available to be re-used.

Let's make the overtime pay calculation from the flow of control
chapter into a function. Then it might look something like this:

    function calcpay(hrs, rate) {
        pay = 0
        if (hrs < 40) {
            pay = hrs * rate
        }
        else {
            pay = 40 * rate + (hrs - 40) * rate * 3 / 2
        }
        return pay
    }

    paybob = calcpay(43, 10)
    print paybob

    payjan = calcpay(41, 12)
    print payjan

There are quite a few pieces to this function scheme. First, there
is a function definition including the function keyword, the function's
name, a parameter list, and a block.

Inside the block the parameters are visible in a scoped symbol
table that cannot be accessed outside of the function. For instance
pay is not defined unless we are in the function block.

There is a new return statement only valid in the block of a function.

Finally, there is a way to call the function. Here we give its name
and put arguments for its formal parameters inside parentheses.

All of this would be even more complicated if our language supported
types.

\section{Grammar Additions}

We have two new statement alternatives.

    statement : ...
              | 'function' ID '(' paramList? ')' block  # functionDefinition
              | 'return' expr NEWLINE                   # return
              ...

The paramList needs a rule. It's already optional, so we need two
choices.

    paramList : ID ',' paramList
              | ID
              ;

The lexemes for these ID tokens will only be available inside the function.

Finally, we need a call expression.

    expr : ...
         | ID '(' exprList? ')'         # call

An expression list is like a parameter list, but parameters define
names and expressions provide values.

    exprList : expr ',' exprList
             | expr
             ;

\section{New Nodes}

We have two new statement productions: functionDefinition and return.
These need nodes. So does the call expr.

\subsecion{ReturnNode}

Since return needs to affect the flow of control, we need a new scheme.
If we had statements with addresses in the memory of an assembly program,
we would record the address of the call. Then return would consume that,
and set the program pointer to that spot. The main driver would then
advance to the next statement as if the call was something simpler.

Our scheme is a bit more vexing. One solution is to throw an exception.
Then whoever invoked the act method on the function block would have
to catch that. We could either put the return value in the exception,
or place it into a special spot in the caller's symbol table. I chose
the latter.

It isn't always catch a named (aka checked) Java exception.
But, it always a good idea to use a name when throwing.

    public class ReturnEncounteredException extends RuntimeException {}

That lets us end a block immediately upon seeing a return statement.
The caller must then retrieve the return value and reset the symbol tables.

    public class ReturnNode extends Node {
        // the name of the return symbol is chosen to be an illegal identifier
        public static final String RETURN_SYMBOL = "1_return_symbol";
        Node valueNode;
        EvalVisitor visitor;
    
        public ReturnNode(Node valueNode, EvalVisitor visitor) {
            this.valueNode = valueNode;
            this.visitor = visitor;
        }
    
        @Override
        public void act() {
            Integer intValue = getIntValue();
            visitor.set(RETURN_SYMBOL, intValue);
            throw new ReturnEncounteredException();
        }
    
        @Override
        public Integer getIntValue() {
            return valueNode.getIntValue();
        }
    
        @Override
        public boolean getBooleanValue() {
            return getIntValue() != 0;
        }
    }

This is very similar to AssignNode. The differences are that it puts
its value into an illegal spot in the symbol table and then throws.

\subsection{FunctionNode}

Some languages allow named parameters, but our functions use
positional parameters instead. The key fact a FunctionNode
to keep track of the list of parameters names in order. It also
needs a block of statements to run.

    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
    
    public class FunctionNode extends Node {
        List<String> params;
        Node block;
    
        public FunctionNode(List<String> params, Node block) {
            this.params = params;
            this.block = block;
        }
    
        public List<String> getParams() {
            return params;
        }
    
        @Override
        public void act() { }
    
        public void invoke() {
            block.act();
        }
    
        @Override
        public Integer getIntValue() {
            return 0;
        }
    
        @Override
        public boolean getBooleanValue() {
            return getIntValue() != 0;
        }
    }

The only methods actually used are the constructor, getParams, and
invoke. FunctionNodes are not put into the program tree, rather
they are kept in a special function symbol table where call statements
can find them.

Remember that the block must include a return statement, otherwise the
call expression will be null. There should be checks for this
somewhere in the compiler.

\subsection{CallNode}

It falls to the call node to direct the execution of the functions.
You don't have to divide things this way. But, I like having only
one complicated node out of these three. I chose CallNode to collect
the complexity.

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;
    
    public class CallNode extends Node {
        String functionName;
        List<Node> argNodes;
        EvalVisitor interpretter;
    
        public CallNode(String functionName, List<Node> argNodes, EvalVisitor interpretter) {
            this.functionName = functionName;
            this.argNodes = argNodes;
            this.interpretter = interpretter;
        }
    
        @Override
        public void act() {}
    
        @Override
        public Integer getIntValue() {
            Map<String, Integer> callFrame = interpretter.addCallStackFrame();
            FunctionNode function = interpretter.resolveFunction(functionName);
            List<String> paramNames = function.getParams();
            List<Integer> args = collectArgs();
    
            for (int i = 0; i < paramNames.size(); i++ ) {
                interpretter.set(paramNames.get(i), args.get(i));
            }
    
            Integer answer = null;
            try {
                function.invoke();
            }
            catch (ReturnEncounteredException e) {
                answer = interpretter.resolve(ReturnNode.RETURN_SYMBOL);
            }
    
            interpretter.discardCallStackFrame();
    
            return answer;
        }
    
        private List<Integer> collectArgs() {
            List<Integer> answer = new ArrayList<>();
    
            for (Node argNode : argNodes) {
                answer.add(argNode.getIntValue());
            }
    
            return answer;
        }
    
        @Override
        public boolean getBooleanValue() {
            return getIntValue() != 0;
        }
    }

The EvalVisitor will need to collect the parameters for the function node
and the expressions that will fill those in during act in the call node.

The CallNode constructor receives the name of the function, the
list of expression nodes passed into its parameters, and the EvalVisitor
so it can work the call stack.

Before we had functions we needed only one symbol table for our integer
variables. Now we have two extra things. First, a whole new
table for functions. Second a stack of variable symbol tables.

We see this right at the beginning of getIntValue in CallNode. It
starts by asking the interpretter to make a new call stack frame.
That frame will be visible only in the function's block. By using
a stack, it can then unwind that frame when the function exits.
This allows nested function calls, and even recursion.
The stack frame is discarded rigth before returning the answer.

In between, we must retrieve the function from the function
symbol table by calling resolveFunction, a new method in EvalVisitor.
Then we need to pass the values for the parameters.

First, ask the function node for the list of parameter names.
Then call collectArgs to evaluate all the expressions we are
going to pass. Loop through both lists together telling the
interpretter to store the arg value in the current symbol table 
under the name of the parameter.

There are lots of error checks missing here. What if the two
lists are different lengths. We should complain as early as
possible, preferably during compilation or before run time.
As a last resort -- which our little language would probably
need -- right before the function is invoked at run time.
That might require a semantic analysis pass over the Node tree
before calling act on its root.

Once the arguments are safely in the symbol table, it remains
to invoke the function. I chose to add a speical method called
invoke to FunctionNode for this purpose. This makes it clearer
that only call can run the function. Calls to act have no effect.

Finally, the return statement in the block will throw an exception
with a rather long name (ReturnEncounteredException) to break
the block loop. While it does that it puts the integer value of
its expression into the RETURN_SYMBOL slot in the symbol table.
That constant has a name which is invalid as an identifier
so programmers cannot bump into it by accident.

The answer is delivered from that special location by a regular
call to resolve, like any variable lookup.

Those are the nodes. We do need changes to EvalVisitor to build
them and to support the extra symbol table work.

\section{Symbol Tables Have Hatched Out}

In the EvalVisitor, we need to expand out notions of symbol tables.
We need a new regular table for functions. But, we also need a stack
of symbol tables to support privately scoped symbols used in function
bodies.

    Stack<Map<String, Integer>> symbolStack;
    Map<String, FunctionNode> functionTable;

Because of the increased complexity, I introduced an explicit
constructor.

    public EvalVisitor() {
        symbolStack = new Stack<>();
        Map<String, Integer> symbolTable = new HashMap<>();
        symbolStack.push(symbolTable);
        functionTable = new HashMap<>();
    }

The global symbol table no longer has a name. It is now just the
base element of the symbolStack. This means that resolve and set
need adjustments. They must now peek at the stack to find their table.

    public Integer resolve(String symbol) {
        return symbolStack.peek().get(symbol);
    }

    public void set(String symbol, Integer newValue) {
        symbolStack.peek().put(symbol, newValue);
    }

Callers need not know how deep the stack is, nor even that there is
a stack. Calling resolve or set will just work on the top table.

For debugging I added a method.

    public void dumpSymbols() {
        System.err.println( "symbols:\n" + symbolStack);
    }

We can call this whenever we are confused about the symbols in scope.
Do note that there is no provision for retrieving global variables
while in a function with this code.

There are methods to insert and remove tables from the stack.

    public Map<String, Integer> addCallStackFrame() {
        Map<String, Integer> newTable = new HashMap<>();

        symbolStack.push(newTable);

        return newTable;
    }

    public void discardCallStackFrame() {
        symbolStack.pop();
    }

Finally, there are helpers for the function symbol table.

    public FunctionNode resolveFunction(String name) {
        return functionTable.get(name);
    }

    public void setFunction(String name, FunctionNode node) {
        functionTable.put(name, node);
    }

\section{Visiting to Create Nodes}

The last thing I will show is actually the first thing that happens.
As we originally visit the antlr parse tree, we need to visit our
new productions and make their nodes.

\subsection{FunctionNode}

    @Override
    public Node visitFunctionDefinition(ExprParser.FunctionDefinitionContext ctx) {
        List<String> parameters = collectParameters(ctx.paramList());
        Node body = visit(ctx.block());

        String functionName = ctx.ID().getText();
        setFunction(functionName, new FunctionNode(parameters, body));

        return null;
    }

To make a function node, we need the parameter names in order and the
block. To put it into the function symbol table, we need its name.
The new setFunction method places it into the table for a CallNode
to find at run time. The only trick is to collect the parameter names.

    private List<String> collectParameters(ExprParser.ParamListContext ctx) {
        List<String> answer = new ArrayList<>();

        while (ctx != null) {
            answer.add(ctx.ID().getText());
            ctx = ctx.paramList();
        }

        return answer;
    }

You could write the loop as a C-style three part for loop. But it would
be hard to fit it on one line of reasonable length, so I went with while.
You do need to remember to advance the context along to the next
parameterList at the end of each iteration. I orginally failed to do
that and landed in an infinite loop.

\subsection{ReturnNode}

    @Override
    public Node visitReturn(ExprParser.ReturnContext ctx) {
        return new ReturnNode(visit(ctx.expr()), this);
    }

There is almost nothing to a return node, it only needs to visit
its expr child to collect the node which will build the value.
It does need the interpretter in order to place the answer into
the symbol table atop the stack.

\subsection{CallNode}

    @Override
    public Node visitCall(ExprParser.CallContext ctx) {
        String functionName = ctx.ID().getText();
        List<Node> args = collectCallArgs(ctx.exprList());

        return new CallNode(functionName, args, this);
    }

    private List<Node> collectCallArgs(ExprParser.ExprListContext ctx) {
        List<Node> answer = new ArrayList<>();
        while (ctx != null) {
            Node arg = visit(ctx.expr());
            answer.add(arg);
            ctx = ctx.exprList();
        }
        return answer;
    }

Collecting the call node is similar to collecting the function node.
It needs a similar helper method to build the list of expression nodes
that will provide the values to the function's parameters. It
returns the newly constructed node like most other statements.

Exercises

1. Add checks to make sure calls provide the correct number of arguments
   to the functions they invoke. Try first with a run time check in
   getIntValue. But, also think about a pass over the tree to check
   for that before the call to act on the root ProgramNode.

2. Turn the symbol table Maps into a separate object. Give those a parent
   attribute. In resolve, walk up the stack looking for symbols that
   are not found in the table at the top of the stack.
