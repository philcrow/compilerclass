\chapter{Expressions}

In the last chapter we made a grammar for antlr which generated
a listener model so we could implement out language that adds
single digit integers.

Here we will expand the NUMBER to allow multiple digits and negative
numbers\footnote{Astute readers will notice a latent problem with
this approach waiting to explode on us when we introduce subtraction.
We'll fix that bug before we are through.} We'll also make a token
to deal with whitespace we don't need.

\section{Expanded Grammar}

If you did exercises two and three in the last chapter, you are ahead of the
game. Here is my new grammar:

    grammar Calc;
    
    program : NUMBER '*' NUMBER  # Mulitply
            | NUMBER '+' NUMBER  # Add
            ;
    
    NUMBER: '-'? [0-9]+ ;
    WS: [ \t\n\r] -> skip ;

There are several new features. Starting at the bottom, we see WS
for whitespace. The character class for that is space, tab, line feed,
and carriage return. In that token definition, we see a new feature
of antlr: the ability to just discard things. There are other ways
to deal with whitespace which you would need for a language like python
where it has semantic significance (indentation indicates the body of
a block). For our language, we simply don't care about whitespace
between the tokens. We skip it.

In the NUMBER definition we see a could of new features. We are tentatively
allowing a leading minus to represent negative numbers. We'll improve
that later. To make something optional in a regular expression use a question
mark. Also, we are no allowing multi-digit integers. That what plus
does in a regular expression: it admits one or more, so required and repeatable.

\subsection{Regular Expression Asside}

Summarizing counters in regular expressions.

    Symbol      Meaning
    ?           preceeding is optional
    +           preceeding is required, but can be repeated indefinitely
    *           preceeding is optional and can be repeated indefinitely

These actually work in the grammar rules as well.

\subsection{Grammar Rules with Choices}

When we originally defined a program, there was only one valid one:
adding two NUMBERS. Now there are two possibilities: adding and multiplying.

We list the first choice after the colon and separate it and subsequent
choices with a pipe symbol. The whole rule still ends with a semi-colon.

Each of these choices is called an alternative. The pipe symbol is
even sometimes called the alternation operator. It works in regular
expressions too. We also call the code that describes each choice as
a production. So there are two productions, one for multiplication
and one for addition.

There are two other subtlies here. First, multiplication takes precedence
over addition in normal Mathematics. We tell antlr about the precedence
by listing the higher precedence operator first. It would not be right
to list addition ahead of multiplication.

Second, productions can have names after a pound sign. I have named
these program productions Multiply and Add. These labels will be used
in method names when antlr generates code. That saves us digging into
the context object to figure out which production matched.

\section{Expanding the Interpretter}

The runner for the expanded language is unchanged. We will need to expand
the tests, but we can keep the first one wihtout alteration.

The interpretter is a different story. We need to teach it about
multiplication and separate that from addition.

    import org.antlr.v4.runtime.ParserRuleContext;
    import org.antlr.v4.runtime.tree.ErrorNode;
    import org.antlr.v4.runtime.tree.TerminalNode;
    
    import java.util.List;
    
    public class Interpretter extends CalcBaseListener {
        int answer = -1;
    	@Override
        public void enterMulitply(CalcParser.MulitplyContext ctx) {
            List<TerminalNode> numberNodes = ctx.NUMBER();
            answer = 1;
            for (TerminalNode node : numberNodes) {
                answer *= Integer.valueOf(node.getText());
            }
        }
    
    	@Override
        public void enterAdd(CalcParser.AddContext ctx) {
            List<TerminalNode> numberNodes = ctx.NUMBER();
            answer = 0;
            for (TerminalNode node : numberNodes) {
                answer += Integer.valueOf(node.getText());
            }
        }
    
        public int getAnswer() {
            return answer;
        }
    }

Now we don't need a program method at all. Instead we implement a method for
each production separately.

Remember that each program can only have one statement. That must be
either addtion or multiplication. The add method looks a lot like the
original program method from the last chapter.

Multiply looks like it too. We just need to remember to reset the
answer in each method, collect the values from the two operands
and perform the operation.

There are some fairly obvious limitations here. We still don't have
subtraction or division. We cannot combine operations like 2 * 3 + 4
or use parentheses like 2 * (3 + 4). Our numbers now allow multiple
digits, but they don't exclude things like 0000, nor do they support
floating point numbers. It would be nice to have variables.
We are still relying completely on antlr for error detection and reporting.

\section{Terence Parr's Expression Language}

Terence Parr is the author of antlr and a book about it called
The Definitive ANTLR4 Reference. In that book he presents an expression
language. I'm going to use it as a starting point for the rest this
discussion.

\subsection{Tokens}

The first step is to separate out the tokens, with the idea that
we could use them for multiple languages. It's also for tidiness.

    lexer grammar CommonLexerRules ;

    ID : [a-zA-Z]+ ;
    INT : [0-9]+ ;
    NEWLINE : '\r'? '\n' ;
    WS : [ \t] -> skip ;
    MUL : '*' ;
    DIV : '/' ;
    ADD : '+' ;
    SUB : '-' ;

This is declared as a lexer grammar. That means it can have only
tokens (which must be capitalized).

From the bottom we start with what amount to labels for the four
basic arthemetic operations. Then we see WS which now skips only space and tab
so that NEWLINE can be defined as a statement terminator. Notice
that NEWLINE make the carriage return optional since Windows uses
is and Unix does not.

The INT is replacing our NUMBER token. It does not allow negative
numbers this salvages subtraction, but requires us to expand
the grammar to include unary negation in the future.

Finally, there is an ID token to match variable names. This is
pretty limited. Different languages have different rules for what
you can name a variable. This one only allows letters. Feel free
to expand the ID definition to include what Java or JavaScript allows.

\section{Grammar}

    grammar Expr;
    import CommonLexerRules;
    
    program : statement+ ;
    
    statement : expr NEWLINE            # printExpr
              | ID '=' expr NEWLINE     # assign
              | NEWLINE                 # blank
              ;
    
    expr : expr op=('*'|'/') expr       # MulDiv
         | expr op=('+'|'-') expr       # AddSub
         | INT                          # int
         | ID                           # id
         | '(' expr ')'                 # parens
         ;

Since the tokens are in a separate file, we need an import to bring them
in.

A program will now be one or more statements. Each statement will be a line
with either an expression (which we will evaluate and print), a variable
declaration and assignment (no nulls here), or an empty line (which we will
ignore).

An expression (named expr) has five alternatives. Remember that precedence
dictates the order. We must combine multiplication and division in
one alternative so they will have the same precedence. Same for addition
and subtraction, which must be listed later.

In addtion to a binary operation, an expr could be an INT, an ID or
any other expression in parentheses. It seems a bit odd to list that
last, in light of precedence. But, if the parser sees an opening parenthesis,
it will only be able to use that rule.

We label each of the productions for expr to get separate methods for them.
Note also that MulDiv and AddSub use op= to name a literal token.
This creates a method called op on the context so we see which one matched.

With this grammar we can recognize programs like this:

    x = 5
    3 + 2 * x

The first line is an assignment. The second will print 13.

Notice that expr is highly recursive. The first two productions start
with an expression. It takes a lot of effort to implement left recursion
like that. Thankfully, antlr and many other tools handle it well.

To see how we did, we can build and run. First, alter your build.gradle
file. Look for the generateGrammarSource block. Make it look like this:

    generateGrammarSource {
        arguments += ["-visitor", "-no-listener", "-long-messages"]
    }

Then run

    gradle build
    cd build/classes/java/main
    grun Expr program -tree -gui
    x = 5
    3 + 2 * x
    CTRL-D (unix) or CRTL-Z (windows)

Requesting visitor and no-listener will move us to the vistor pattern.
Then the various methods that walk the parse tree will have more control
of how the walk goes and they will be able to return something. That
will remove the need for a getAnswer method in the interpretter.

\section{Driving with Visitor}

    import org.antlr.v4.runtime.*;
    import org.antlr.v4.runtime.tree.*;
    
    // Visitor approach
    public class Runner {
        public Integer run(String fileName) throws Exception {
            CharStream input  = CharStreams.fromFileName(fileName);
            return run(input);
        }
    
        public Integer run(CharStream input) {
            ExprLexer         lexer  = new ExprLexer(input);
            CommonTokenStream tokens = new CommonTokenStream(lexer);
            ExprParser        parser = new ExprParser(tokens);
            ParseTree         tree   = parser.program();
    
            EvalVisitor eval = new EvalVisitor();
            return eval.visit(tree);
        }
    
        public static void main(String[] args) throws Exception {
            String fileName = args[0];
            Runner runner = new Runner();
            Integer answer = runner.run(fileName);
        }
    }

The structure is similar. Note that the run methods now return the answer.
The setup is similar in the CharStream run method. But, our code will
now perform visit directly given a parse tree.

\section{Tests}

That structure allows for tests like this:

    import org.antlr.v4.runtime.*;
    
    import org.junit.*;
    import static org.junit.Assert.*;
    
    public class RunnerTest {
        @Test
        public void addTest() {
            String program = "4+5";
            CharStream input = CharStreams.fromString(program);
            Runner runner = new Runner();
            int answer = runner.run(input);
            assertEquals(9, answer);
    
            program = "-3 + 6";
            input = CharStreams.fromString(program);
            runner = new Runner();
            answer = runner.run(input);
            assertEquals(3, answer);
    
            program = "-15 + -24";
            input = CharStreams.fromString(program);
            runner = new Runner();
            answer = runner.run(input);
            assertEquals(-39, answer);
        }
    
        @Test
        public void multiplyTest() {
            String program = "4*5";
            CharStream input = CharStreams.fromString(program);
            Runner runner = new Runner();
            int answer = runner.run(input);
            assertEquals(20, answer);
    
            program = "52 * -13";
            input = CharStreams.fromString(program);
            runner = new Runner();
            answer = runner.run(input);
            assertEquals(-676, answer);
        }
    
        @Test
        public void assignTest() {
            String program = "x = 4\n3 + x * 2";
            CharStream input = CharStreams.fromString(program);
            Runner runner = new Runner();
            int answer = runner.run(input);
            assertEquals(11, answer);
        }
    }

The assign test is typical. It looks just like our prior tests, except
that we receive as a return value instead of having to ask for the answer.
The other methods just repeat the same plan.

\section{A Visiting Interpretter}

When I asked antlr for the visitor pattern, it started making ExprVisitor
and ExprBaseVisitor instead of the Listener and BaseListener versions. There are
quite a few differences. I've already mentioned that vistor methods
return something. All of them must return the same type. For now that
will be Integer.

The key difference is that instead of magically calling enter and
exit methods for each production, it will now make a single visit method
which will decide whether to visit its children and if does that,
control the order of those visits. This is control at the expense of effort.

The easiest method is the one for INT.

        @Override
        public Integer visitInt(ExprParser.IntContext ctx) {
            return Integer.valueOf(ctx.INT().getText());
        }

It asks the context for the text in the INT token, converts that
to an Integer, which it returns.

The ID method is similar, but needs to look up the value of the variable.
We keep the values of variables in a symbol table. Since our language
only has one type, we don't need anything more than a map.

    Map<String, Integer> symbolTable = new HashMap<>();

Note that I avoided the need for an explicit constructor by building
an empty hash map while declaring this.

There are two productions that use this table: assign and ID. The visitId
method will complain if the variable is not in the table. That is, you ought
to assign a value to the variable first.

    @Override
    public Integer visitId(ExprParser.IdContext ctx) {
        String id = ctx.ID().getText();

        if (symbolTable.containsKey(id)) {
            return symbolTable.get(id);
        }
        else {
            System.err.println( "undefined symbol: " + id + " using 0");
            return 0;
        }
    }

You have to decide how you want to handle errors. It would certainly
be appropriate to throw and exception here instead of merely warning
and substituting zero. Java would definitely throw (or possibly fail
to compile). Perl without strict mode would warn and use zero. These
are choices for you as the language designer. Most designers prefer to
throw, because that prevents errors (misspelled variable, failure to
give a value, to name two).

The assign method puts variables into the table.

    @Override
    public Integer visitAssign(ExprParser.AssignContext ctx) {
        String id = ctx.ID().getText(); // get the variable name
        int value = visit(ctx.expr());  // walk the expression subtree for value

        symbolTable.put(id, value);     // store the variable in the symbol table
        return value;
    }

Here we finally see the need to visit the children instead of just looking
up the lexemes in the tokens\footnote{A token is the thing defined in the grammar
like ID. A lexeme is the text in the program that was recognized as one of those
like aVarName.}.

First, we lookup the name as we did in visitId. Then, we visit the expression
child, which could be a complicated computation. Finally, we record those
in the symbol table. The return value is not used here. We don't have
a visitProgram, so no one is storing this return value. I just prefer not
to return nulls.

Print and parentheses are similar and straightforward. They just need the
value from visiting their children. Print sends that to standard output.
Parentheses returns it to its parent.

    @Override
    public Integer visitPrintExpr(ExprParser.PrintExprContext ctx) {
        Integer value = visit(ctx.expr());
        System.out.println(value);
        return value;
    }

    @Override
    public Integer visitParens(ExprParser.ParensContext ctx) {
        return visit(ctx.expr());
    }

When it is time to visit a child, the visit in the parent method
explicitly calls visit (inherited) passing it the child to visit.
Again this allows us full control of the order of visiting the children.

The only other methods are for the binary operations. There are two
of these (antlr's rule: one visit method per named production).

    @Override
    public Integer visitMulDiv(ExprParser.MulDivContext ctx) {
        Integer left = visit(ctx.expr(0));
        Integer right = visit(ctx.expr(1));

        if (ctx.op.getType() == ExprParser.MUL) {
            return left * right;
        }
        else {
            return left / right;
        }
    }

    @Override
    public Integer visitAddSub(ExprParser.AddSubContext ctx) {
        Integer left = visit(ctx.expr(0));
        Integer right = visit(ctx.expr(1));

        if (ctx.op.getType() == ExprParser.ADD) {
            return left + right;
        }
        else {
            return left - right;
        }
    }

In the grammar we named the literal token for the operator
as op. That becomes a field (not a method) of the context object.
All of these visit the left child, then the right child. Then they use
the op field to discover which operation the parser saw. After that
we just leverage Java to do the Math.

It is useful to think of the tree that grun shows (or draw your
own version) when you write these methods.

With all that in place we can type

    gradle build
    java -jar build/libs/app.jar program.file.name

Note that the tests will already have run. If they fail, gradle will not
build the jar.

Exercises

1. Make a new visitor with the same structure as EvalVisitor.java.
   But, change the generic type to String (was Integer). Instead of
   calculating, each method should return its output in postfix
   notation with one item per line ready for the dc unix calculator.
   In visitPrintExpr print the results from the children and
   end the output with a p to pop the stack and print the result.
   So 3 + 2 becomes
   3
   2
   +
   p
   After you execute gradle build, you can pipe the output of your running
   a program with the jar to dc and see the answer from it.
   If you don't have access to dc:
   omit the final p (which pops the stack and prints the answer)
   install
   https://github.com/philcrow/compilerclass/blob/main/stackmachine/machine.py
   and feed it your output.

2. Convert Expr.g4 to use floating point numbers. Change the token from
   INT to FLOAT, adjust the regular expression so it can handle numbers
   with decimal points (it's fine if the decimal point is required and
   there is no need to handle exponential notation common in many languages).

3. Use the context object in the visitId method to retrieve include
   the line number in the warning message when a variable is used without
   assignment.
